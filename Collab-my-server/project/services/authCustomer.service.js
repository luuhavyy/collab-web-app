const { getDB } = require("../../database");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const nodemailer = require("nodemailer");

const customerCollection = () => getDB().collection("Customer");
const secretKey = process.env.JWT_SECRET;
const saltRounds = 10;
const { ObjectId } = require("mongodb"); 

//  C·∫•u h√¨nh g·ª≠i email (d√πng Gmail)
const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
        customer: "your-email@gmail.com",
        pass: "your-email-password",
    },
});

//  G·ª≠i email reset m·∫≠t kh·∫©u
const sendResetEmail = async (email, resetToken) => {
    const resetLink = `http://localhost:4200/reset-password/${resetToken}`;

    const mailOptions = {
        from: "your-email@gmail.com",
        to: email,
        subject: "Reset Your Password",
        html: `<p>Click <a href="${resetLink}">here</a> to reset your password.</p>`,
    };

    await transporter.sendMail(mailOptions);
};

//  ƒêƒÉng k√Ω t√†i kho·∫£n kh√°ch h√†ng
exports.registerCustomer = async (req, res) => {
    try {
        const { first_name, last_name, email, phone_number, address, password } = req.body;

        if (!first_name || !last_name || !email || !phone_number || !password) {
            return res.status(400).send({ error: "Missing required fields" });
        }

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingCustomer = await customerCollection().findOne({ email });
        if (existingCustomer) {
            return res.status(400).send({ error: "Email already in use" });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, saltRounds);

        // T·∫°o t√†i kho·∫£n kh√°ch h√†ng
        const newCustomer = {
            first_name,
            last_name,
            email,
            phone_number,
            address,
            password: hashedPassword,
            buying_points: 0,
            created_at: new Date(),
        };

        await customerCollection().insertOne(newCustomer);

        res.send({ success: true, message: "Registration successful" });

    } catch (error) {
        res.status(500).send({ error: "Internal Server Error" });
    }
};

//  ƒêƒÉng nh·∫≠p kh√°ch h√†ng
exports.loginCustomer = async (req, res) => {
    try {
        const { email, password } = req.body;
        const customer = await customerCollection().findOne({ email });

        if (!customer) return res.status(400).json({ error: "Customer not found" });

        const isMatch = await bcrypt.compare(password, customer.password);
        if (!isMatch) return res.status(400).json({ error: "Invalid password" });

        const token = jwt.sign({ customerId: customer._id, role: "customer" }, secretKey, { expiresIn: "12h" });

        res.json({ success: true, token, customerId: customer._id });
    } catch (error) {
        res.status(500).json({ error: "Internal Server Error" });
    }
};

//  G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
exports.forgotPassword = async (req, res) => {
    try {
        const { email } = req.body;

        // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
        const customer = await customerCollection().findOne({ email });
        if (!customer) return res.status(400).json({ error: "Email not found" });

        // T·∫°o token reset m·∫≠t kh·∫©u (c√≥ th·ªùi h·∫°n 15 ph√∫t)
        const resetToken = jwt.sign({ customerId: customer._id }, secretKey, { expiresIn: "15m" });

        // G·ª≠i email ch·ª©a link reset m·∫≠t kh·∫©u
        await sendResetEmail(email, resetToken);

        res.json({ success: true, message: "Reset password email sent" });

    } catch (error) {
        res.status(500).json({ error: "Internal Server Error" });
    }
};

//  ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u (khi ng∆∞·ªùi d√πng click v√†o link email)
exports.resetPassword = async (req, res) => {
    try {
        const { resetToken, newPassword } = req.body;

        // X√°c minh token
        const decoded = jwt.verify(resetToken, secretKey);
        const customerId = decoded.customerId;

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        const hashedPassword = await bcrypt.hash(newPassword, saltRounds);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong database
        await customerCollection().updateOne(
            { _id: new ObjectId(customerId) },
            { $set: { password: hashedPassword } }
        );

        res.json({ success: true, message: "Password reset successful" });

    } catch (error) {
        res.status(400).json({ error: "Invalid or expired token" });
    }
};
// ƒê·ªïi m·∫≠t kh·∫©u (khi kh√°ch h√†ng ƒë√£ ƒëƒÉng nh·∫≠p)
exports.changePassword = async (req, res) => {
    try {
        const { oldPassword, newPassword } = req.body;
        const customerId = req.user.customerId; // üî• ƒê√£ s·ª≠a t·ª´ req.customer th√†nh req.user

        if (!customerId) {
            return res.status(401).json({ error: "Unauthorized - No customer ID in token" });
        }

        // T√¨m kh√°ch h√†ng theo ID
        const customer = await customerCollection().findOne({ _id: new ObjectId(customerId) });

        if (!customer) return res.status(400).json({ error: "Customer not found" });

        // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
        const isMatch = await bcrypt.compare(oldPassword, customer.password);
        if (!isMatch) return res.status(400).json({ error: "Old password is incorrect" });

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        const hashedPassword = await bcrypt.hash(newPassword, saltRounds);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
        await customerCollection().updateOne(
            { _id: new ObjectId(customerId) },
            { $set: { password: hashedPassword } }
        );

        res.json({ success: true, message: "Password changed successfully" });

    } catch (error) {
        console.error("Change Password Error:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
};


// ƒêƒÉng xu·∫•t kh√°ch h√†ng
exports.logoutCustomer = async (req, res) => {
    try {
        // Tr√™n th·ª±c t·∫ø, logout ·ªü client ch·ªâ c·∫ßn xo√° token kh·ªèi localStorage/cookie
        res.json({ success: true, message: "Logout successful" });
    } catch (error) {
        res.status(500).json({ error: "Internal Server Error" });
    }
};
